name: Terraform Deployment

on:
  push:
    branches:
      - main

env:
  TF_VAR_ACCOUNT_ID: $(aws sts get-caller-identity --query Account --output text)
  TF_VAR_AWS_REGION: us-east-1
  TF_VAR_QUEUE_NAME: skeleton-pub-queue
  PROJECT_NAME: skeleton-sub

jobs:
  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest

    steps:
      - name: Terraform Format
        run: terraform fmt -recursive
        working-directory: terraform

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TF_VAR_AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format Check
        run: terraform fmt -check
        working-directory: terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform

      - name: Terraform Plan
        run: terraform plan -input=false
        working-directory: terraform

      - name: Terraform Import Existing Resources
        run: |
          set -e
          
          echo "Importando Lambda Function..."
          terraform import aws_lambda_function.lambda "$PROJECT_NAME" || echo "Lambda já importada ou não existe."

          echo "Verificando mapeamento existente SQS → Lambda..."
          MAPPING_UUID=$(aws lambda list-event-source-mappings \
            --function-name "$PROJECT_NAME" \
            --event-source arn:aws:sqs:$TF_VAR_AWS_REGION:$TF_VAR_ACCOUNT_ID:$TF_VAR_QUEUE_NAME \
            --region $TF_VAR_AWS_REGION \
            --query 'EventSourceMappings[0].UUID' \
            --output text 2>/dev/null)

          echo "Event Source Mapping UUID encontrado: $MAPPING_UUID"

          if [ "$MAPPING_UUID" != "None" ] && [ -n "$MAPPING_UUID" ]; then
            echo "Importando o Event Source Mapping existente..."
            terraform import aws_lambda_event_source_mapping.from_sqs "$MAPPING_UUID" || {
              echo "::error ::Erro ao importar Event Source Mapping. Abortando."
              exit 1
            }
          else
            echo "::error ::Event Source Mapping já existe na AWS, mas não pôde ser importado. Abortando para evitar conflito no apply."
            exit 1
          fi

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false
        working-directory: terraform
