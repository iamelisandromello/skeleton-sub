name: Dynamic Lambda Deployment

on:
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4 
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install
      
      - name: Build TypeScript
        run: npm run build

      - name: Setup Environment Variables
        run: echo "PROJECT_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
      
      - name: Create Lambda ZIP with node_modules
        run: |
          mkdir -p lambda-package
          cp -r dist/* lambda-package/
          cp -r node_modules lambda-package/
          cp package.json lambda-package/
          cd lambda-package
          zip -r ../${{ env.PROJECT_NAME }}.zip .

      - name: Upload Lambda ZIP to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: aws s3 cp ${{ env.PROJECT_NAME }}.zip s3://meu-unico-bucket-s3/${{ env.PROJECT_NAME }}.zip

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.6

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Create environment JSON file for Terraform
        run: |
          echo '{"lambda_env_vars": ${{ secrets.LAMBDA_ENV_VARS_JSON }}}' > terraform/lambda-env-vars.auto.tfvars.json

      - name: Manage Existing AWS Resources
        run: |
          export QUEUE_NAME="${{ env.PROJECT_NAME }}-queue"
          export AWS_REGION="${{ env.AWS_REGION }}"
          export ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          export FUNCTION_NAME="${{ env.PROJECT_NAME }}"

          # Import existing resources
          terraform import aws_s3_bucket.lambda_code_bucket meu-unico-bucket-s3 || echo "Bucket already managed"
          terraform import aws_iam_role.lambda_execution_role "${FUNCTION_NAME}_execution_role" || echo "Role already managed"
          terraform import aws_cloudwatch_log_group.lambda_log_group "/aws/lambda/${FUNCTION_NAME}" || echo "Log group already managed"
          terraform import aws_lambda_function.my_lambda_function "${FUNCTION_NAME}" || echo "Lambda function already managed"

          # Manage SQS Queue
          QUEUE_URL=$(aws sqs get-queue-url --queue-name "$QUEUE_NAME" --region "$AWS_REGION" --query 'QueueUrl' --output text 2>/dev/null)
          if [ -n "$QUEUE_URL" ]; then
            terraform import aws_sqs_queue.my_queue "$QUEUE_URL" || echo "Queue already managed"
          else
            echo "Queue '$QUEUE_NAME' not found in region '$AWS_REGION'."
          fi

          # Manage Lambda Permission
          POLICY=$(aws lambda get-policy --function-name "$FUNCTION_NAME" --region "$AWS_REGION" --query 'Policy' --output text 2>/dev/null)
          if echo "$POLICY" | grep -q "AllowExecutionFromSQS"; then
            echo "Removing existing Lambda permission 'AllowExecutionFromSQS'"
            aws lambda remove-permission --function-name "$FUNCTION_NAME" --statement-id "AllowExecutionFromSQS" --region "$AWS_REGION"
          fi

          # Manage Event Source Mapping
          MAPPING_UUID=$(aws lambda list-event-source-mappings \
            --function-name "$FUNCTION_NAME" \
            --event-source arn:aws:sqs:$AWS_REGION:$ACCOUNT_ID:$QUEUE_NAME \
            --region $AWS_REGION \
            --query 'EventSourceMappings[0].UUID' \
            --output text 2>/dev/null)

          if [ "$MAPPING_UUID" != "None" ] && [ -n "$MAPPING_UUID" ]; then
            echo "Removing existing Event Source Mapping with UUID: $MAPPING_UUID"
            aws lambda delete-event-source-mapping --uuid "$MAPPING_UUID" --region "$AWS_REGION"
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_project_name: ${{ env.PROJECT_NAME }}
        working-directory: terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: terraform
        env:
          TF_VAR_project_name: ${{ env.PROJECT_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
