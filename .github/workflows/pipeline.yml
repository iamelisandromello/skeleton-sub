name: Dynamic Lambda Deployment

on:
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1

    steps:
      # 1. Checkout do repositório
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Setup do Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 3. Instalação de dependências e build
      - name: Install dependencies
        run: npm install

      - name: Build TypeScript
        run: npm run build

      # 4. Define o nome do projeto dinamicamente
      - name: Set project name from repo
        run: echo "PROJECT_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      # 5. Empacota a Lambda em zip com dependências
      - name: Package Lambda with node_modules
        run: |
          mkdir -p lambda-package
          cp -r dist/* lambda-package/
          cp -r node_modules lambda-package/
          cp package.json lambda-package/
          cd lambda-package
          zip -r ../${{ env.PROJECT_NAME }}.zip .

      # 6. Envia para o bucket S3
      - name: Upload Lambda ZIP to S3
        run: aws s3 cp ${{ env.PROJECT_NAME }}.zip s3://meu-unico-bucket-s3/${{ env.PROJECT_NAME }}.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # 7. Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.6

      # 8. Terraform Init
      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      # 9. Gera o arquivo .tfvars para as variáveis da Lambda
      - name: Create Lambda env vars file
        run: |
          printf '{"lambda_env_vars": %s}\n' '${{ secrets.LAMBDA_ENV_VARS_JSON }}' > lambda-env-vars.auto.tfvars.json
        working-directory: terraform

      # 10. Importa recursos se já existirem (não tenta recriar)
      - name: Import AWS resources if they exist
        run: |
          set -euo pipefail

          QUEUE_NAME="skeleton-pub-queue"
          AWS_REGION="${{ env.AWS_REGION }}"
          FUNCTION_NAME="${{ env.PROJECT_NAME }}"
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)

          echo "Account ID: $ACCOUNT_ID"
          echo "Function Name: $FUNCTION_NAME"
          echo "Queue Name: $QUEUE_NAME"
          echo "Region: $AWS_REGION"

          cd terraform

          # Importa SQS se existir
          QUEUE_URL=$(aws sqs get-queue-url --queue-name "$QUEUE_NAME" --region "$AWS_REGION" --query 'QueueUrl' --output text 2>/dev/null || true)
          if [ -n "$QUEUE_URL" ]; then
            echo "Importando fila SQS: $QUEUE_URL"
            terraform import aws_sqs_queue.skeleton_pub_queue "$QUEUE_URL" || true
          else
            echo "Fila SQS não encontrada: $QUEUE_NAME"
          fi

          # Importa permissão da Lambda
          echo "Importando permissão Lambda (se existir)..."
          terraform import aws_lambda_permission.allow_sqs_invoke "${FUNCTION_NAME}/AllowExecutionFromSQS" || true

          # Importa Event Source Mapping
          echo "Verificando Event Source Mapping..."
          MAPPING_UUID=$(aws lambda list-event-source-mappings \
            --function-name "$FUNCTION_NAME" \
            --event-source "arn:aws:sqs:$AWS_REGION:$ACCOUNT_ID:$QUEUE_NAME" \
            --region "$AWS_REGION" \
            --query 'EventSourceMappings[0].UUID' \
            --output text 2>/dev/null || true)

          if [ "$MAPPING_UUID" != "None" ] && [ -n "$MAPPING_UUID" ]; then
            echo "Importando Event Source Mapping: $MAPPING_UUID"
            terraform import aws_lambda_event_source_mapping.from_sqs "$MAPPING_UUID" || true
          else
            echo "Nenhum Event Source Mapping encontrado."
          fi

          # Importa bucket S3, IAM Role, LogGroup, Lambda
          terraform import aws_s3_bucket.lambda_code_bucket meu-unico-bucket-s3 || true
          terraform import aws_iam_role.lambda_execution_role "${FUNCTION_NAME}_execution_role" || true
          terraform import aws_cloudwatch_log_group.lambda_log_group "/aws/lambda/${FUNCTION_NAME}" || true
          terraform import aws_lambda_function.my_lambda_function "$FUNCTION_NAME" || true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_project_name: ${{ env.PROJECT_NAME }}

      # 11. Terraform Plan
      - name: Terraform Plan
        run: terraform plan -input=false
        working-directory: terraform
        env:
          TF_VAR_project_name: ${{ env.PROJECT_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # 12. Terraform Apply
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: terraform
        env:
          TF_VAR_project_name: ${{ env.PROJECT_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
