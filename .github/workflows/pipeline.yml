name: Dynamic Lambda Deployment

on:
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4 
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install
      
      - name: Build TypeScript
        run: npm run build

      - name: Setup Environment Variables
        run: echo "PROJECT_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
      
      - name: Create Lambda ZIP with node_modules
        run: |
          mkdir -p lambda-package
          cp -r dist/* lambda-package/
          cp -r node_modules lambda-package/
          cp package.json lambda-package/
          cd lambda-package
          zip -r ../${{ env.PROJECT_NAME }}.zip .

      - name: Upload Lambda ZIP to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: aws s3 cp ${{ env.PROJECT_NAME }}.zip s3://meu-unico-bucket-s3/${{ env.PROJECT_NAME }}.zip

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.6

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Create environment JSON file for Terraform
        run: |
          printf '{"lambda_env_vars": %s}\n' '${{ secrets.LAMBDA_ENV_VARS_JSON }}' > terraform/lambda-env-vars.auto.tfvars.json

      - name: Import existing AWS resources
        run: |
          terraform import aws_s3_bucket.lambda_code_bucket meu-unico-bucket-s3 || echo "Bucket already managed"
          terraform import aws_iam_role.lambda_execution_role ${{ env.PROJECT_NAME }}_execution_role || echo "Role already managed"
          terraform import aws_cloudwatch_log_group.lambda_log_group "/aws/lambda/${{ env.PROJECT_NAME }}" || echo "Log group already managed"
          terraform import aws_lambda_function.my_lambda_function ${{ env.PROJECT_NAME }}
        continue-on-error: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_project_name: ${{ env.PROJECT_NAME }}
        working-directory: terraform

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve
        working-directory: terraform
        env:
          TF_VAR_project_name: ${{ env.PROJECT_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
